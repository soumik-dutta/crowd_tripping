{"date":"Wed Jul 15 2015 02:02:16 GMT+0530 (IST)","process":{"pid":24442,"uid":1000,"gid":1000,"cwd":"/home/soumik/Projects/nodejs/cloud_tripper1","execPath":"/usr/bin/nodejs","version":"v0.10.25","argv":["nodejs","/home/soumik/Projects/nodejs/cloud_tripper1/app","./bin/www"],"memoryUsage":{"rss":29638656,"heapTotal":25873536,"heapUsed":10108304}},"os":{"loadavg":[0.787109375,0.796875,0.7490234375],"uptime":8843.563492971},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":null,"file":null,"function":"||","line":null,"method":null,"native":false},{"column":8,"file":"/home/soumik/Projects/nodejs/cloud_tripper1/app.js","function":"","line":21,"method":null,"native":false},{"column":26,"file":"module.js","function":"Module._compile","line":456,"method":"_compile","native":false},{"column":10,"file":"module.js","function":"Object.Module._extensions..js","line":474,"method":"Module._extensions..js","native":false},{"column":32,"file":"module.js","function":"Module.load","line":356,"method":"load","native":false},{"column":12,"file":"module.js","function":"Function.Module._load","line":312,"method":"Module._load","native":false},{"column":10,"file":"module.js","function":"Function.Module.runMain","line":497,"method":"Module.runMain","native":false},{"column":16,"file":"node.js","function":"startup","line":119,"method":null,"native":false},{"column":3,"file":"node.js","function":null,"line":902,"method":null,"native":false}],"stack":["TypeError: Object function logger(options) {","  if ('object' == typeof options) {","    options = options || {};","  } else if (options) {","    options = { format: options };","  } else {","    options = {};","  }","","  // output on request instead of response","  var immediate = options.immediate;","","  // check if log entry should be skipped","  var skip = options.skip || function () { return false; };","","  // format name","  var fmt = exports[options.format] || options.format || exports.default;","","  // compile format","  if ('function' != typeof fmt) fmt = compile(fmt);","","  // options","  var stream = options.stream || process.stdout","    , buffer = options.buffer;","","  // buffering support","  if (buffer) {","    var realStream = stream","      , buf = []","      , interval = 'number' == typeof buffer","        ? buffer","        : defaultBufferDuration;","","    // flush interval","    setInterval(function(){","      if (buf.length) {","        realStream.write(buf.join(''));","        buf.length = 0;","      }","    }, interval);","","    // swap the stream","    stream = {","      write: function(str){","        buf.push(str);","      }","    };","  }","","  return function logger(req, res, next) {","    var sock = req.socket;","    req._startTime = new Date;","    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;","","    function logRequest(){","      res.removeListener('finish', logRequest);","      res.removeListener('close', logRequest);","      if (skip(req, res)) return;","      var line = fmt(exports, req, res);","      if (null == line) return;","      stream.write(line + '\\n');","    };","","    // immediate","    if (immediate) {","      logRequest();","    // proxy end to output logging","    } else {","      res.on('finish', logRequest);","      res.on('close', logRequest);","    }","","","    next();","  };","} has no method 'debug'","    at Object.<anonymous> (/home/soumik/Projects/nodejs/cloud_tripper1/app.js:21:8)","    at Module._compile (module.js:456:26)","    at Object.Module._extensions..js (module.js:474:10)","    at Module.load (module.js:356:32)","    at Function.Module._load (module.js:312:12)","    at Function.Module.runMain (module.js:497:10)","    at startup (node.js:119:16)","    at node.js:902:3"],"level":"error","message":"uncaughtException: Object function logger(options) {\n  if ('object' == typeof options) {\n    options = options || {};\n  } else if (options) {\n    options = { format: options };\n  } else {\n    options = {};\n  }\n\n  // output on request instead of response\n  var immediate = options.immediate;\n\n  // check if log entry should be skipped\n  var skip = options.skip || function () { return false; };\n\n  // format name\n  var fmt = exports[options.format] || options.format || exports.default;\n\n  // compile format\n  if ('function' != typeof fmt) fmt = compile(fmt);\n\n  // options\n  var stream = options.stream || process.stdout\n    , buffer = options.buffer;\n\n  // buffering support\n  if (buffer) {\n    var realStream = stream\n      , buf = []\n      , interval = 'number' == typeof buffer\n        ? buffer\n        : defaultBufferDuration;\n\n    // flush interval\n    setInterval(function(){\n      if (buf.length) {\n        realStream.write(buf.join(''));\n        buf.length = 0;\n      }\n    }, interval);\n\n    // swap the stream\n    stream = {\n      write: function(str){\n        buf.push(str);\n      }\n    };\n  }\n\n  return function logger(req, res, next) {\n    var sock = req.socket;\n    req._startTime = new Date;\n    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;\n\n    function logRequest(){\n      res.removeListener('finish', logRequest);\n      res.removeListener('close', logRequest);\n      if (skip(req, res)) return;\n      var line = fmt(exports, req, res);\n      if (null == line) return;\n      stream.write(line + '\\n');\n    };\n\n    // immediate\n    if (immediate) {\n      logRequest();\n    // proxy end to output logging\n    } else {\n      res.on('finish', logRequest);\n      res.on('close', logRequest);\n    }\n\n\n    next();\n  };\n} has no method 'debug'","timestamp":"2015-07-14T20:32:16.827Z"}
{"date":"Thu Jul 16 2015 01:23:01 GMT+0530 (IST)","process":{"pid":3993,"uid":1000,"gid":1000,"cwd":"/home/soumik/Projects/nodejs/cloud_tripper1","execPath":"/usr/bin/nodejs","version":"v0.10.25","argv":["nodejs","/home/soumik/Projects/nodejs/cloud_tripper1/app","./bin/www"],"memoryUsage":{"rss":36245504,"heapTotal":26889216,"heapUsed":10105128}},"os":{"loadavg":[0.6494140625,0.5126953125,0.52294921875],"uptime":2694.734454676},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":null,"file":null,"function":"||","line":null,"method":null,"native":false},{"column":8,"file":"/home/soumik/Projects/nodejs/cloud_tripper1/app.js","function":"","line":21,"method":null,"native":false},{"column":26,"file":"module.js","function":"Module._compile","line":456,"method":"_compile","native":false},{"column":10,"file":"module.js","function":"Object.Module._extensions..js","line":474,"method":"Module._extensions..js","native":false},{"column":32,"file":"module.js","function":"Module.load","line":356,"method":"load","native":false},{"column":12,"file":"module.js","function":"Function.Module._load","line":312,"method":"Module._load","native":false},{"column":10,"file":"module.js","function":"Function.Module.runMain","line":497,"method":"Module.runMain","native":false},{"column":16,"file":"node.js","function":"startup","line":119,"method":null,"native":false},{"column":3,"file":"node.js","function":null,"line":902,"method":null,"native":false}],"stack":["TypeError: Object function logger(options) {","  if ('object' == typeof options) {","    options = options || {};","  } else if (options) {","    options = { format: options };","  } else {","    options = {};","  }","","  // output on request instead of response","  var immediate = options.immediate;","","  // check if log entry should be skipped","  var skip = options.skip || function () { return false; };","","  // format name","  var fmt = exports[options.format] || options.format || exports.default;","","  // compile format","  if ('function' != typeof fmt) fmt = compile(fmt);","","  // options","  var stream = options.stream || process.stdout","    , buffer = options.buffer;","","  // buffering support","  if (buffer) {","    var realStream = stream","      , buf = []","      , interval = 'number' == typeof buffer","        ? buffer","        : defaultBufferDuration;","","    // flush interval","    setInterval(function(){","      if (buf.length) {","        realStream.write(buf.join(''));","        buf.length = 0;","      }","    }, interval);","","    // swap the stream","    stream = {","      write: function(str){","        buf.push(str);","      }","    };","  }","","  return function logger(req, res, next) {","    var sock = req.socket;","    req._startTime = new Date;","    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;","","    function logRequest(){","      res.removeListener('finish', logRequest);","      res.removeListener('close', logRequest);","      if (skip(req, res)) return;","      var line = fmt(exports, req, res);","      if (null == line) return;","      stream.write(line + '\\n');","    };","","    // immediate","    if (immediate) {","      logRequest();","    // proxy end to output logging","    } else {","      res.on('finish', logRequest);","      res.on('close', logRequest);","    }","","","    next();","  };","} has no method 'debug'","    at Object.<anonymous> (/home/soumik/Projects/nodejs/cloud_tripper1/app.js:21:8)","    at Module._compile (module.js:456:26)","    at Object.Module._extensions..js (module.js:474:10)","    at Module.load (module.js:356:32)","    at Function.Module._load (module.js:312:12)","    at Function.Module.runMain (module.js:497:10)","    at startup (node.js:119:16)","    at node.js:902:3"],"level":"error","message":"uncaughtException: Object function logger(options) {\n  if ('object' == typeof options) {\n    options = options || {};\n  } else if (options) {\n    options = { format: options };\n  } else {\n    options = {};\n  }\n\n  // output on request instead of response\n  var immediate = options.immediate;\n\n  // check if log entry should be skipped\n  var skip = options.skip || function () { return false; };\n\n  // format name\n  var fmt = exports[options.format] || options.format || exports.default;\n\n  // compile format\n  if ('function' != typeof fmt) fmt = compile(fmt);\n\n  // options\n  var stream = options.stream || process.stdout\n    , buffer = options.buffer;\n\n  // buffering support\n  if (buffer) {\n    var realStream = stream\n      , buf = []\n      , interval = 'number' == typeof buffer\n        ? buffer\n        : defaultBufferDuration;\n\n    // flush interval\n    setInterval(function(){\n      if (buf.length) {\n        realStream.write(buf.join(''));\n        buf.length = 0;\n      }\n    }, interval);\n\n    // swap the stream\n    stream = {\n      write: function(str){\n        buf.push(str);\n      }\n    };\n  }\n\n  return function logger(req, res, next) {\n    var sock = req.socket;\n    req._startTime = new Date;\n    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;\n\n    function logRequest(){\n      res.removeListener('finish', logRequest);\n      res.removeListener('close', logRequest);\n      if (skip(req, res)) return;\n      var line = fmt(exports, req, res);\n      if (null == line) return;\n      stream.write(line + '\\n');\n    };\n\n    // immediate\n    if (immediate) {\n      logRequest();\n    // proxy end to output logging\n    } else {\n      res.on('finish', logRequest);\n      res.on('close', logRequest);\n    }\n\n\n    next();\n  };\n} has no method 'debug'","timestamp":"2015-07-15T19:53:01.547Z"}
{"date":"Sat Aug 01 2015 11:56:54 GMT+0530 (IST)","process":{"pid":3459,"uid":1000,"gid":1000,"cwd":"/home/soumik/Projects/nodejs/cloud_tripper1","execPath":"/usr/bin/nodejs","version":"v0.10.25","argv":["/usr/bin/node","/home/soumik/Projects/nodejs/cloud_tripper1/app.js"],"memoryUsage":{"rss":36507648,"heapTotal":27892736,"heapUsed":10173836}},"os":{"loadavg":[0.6669921875,0.7275390625,0.5673828125],"uptime":2180.429422407},"trace":[{"column":null,"file":null,"function":null,"line":null,"method":null,"native":false},{"column":null,"file":null,"function":"||","line":null,"method":null,"native":false},{"column":8,"file":"/home/soumik/Projects/nodejs/cloud_tripper1/app.js","function":"","line":23,"method":null,"native":false},{"column":26,"file":"module.js","function":"Module._compile","line":456,"method":"_compile","native":false},{"column":10,"file":"module.js","function":"Object.Module._extensions..js","line":474,"method":"Module._extensions..js","native":false},{"column":32,"file":"module.js","function":"Module.load","line":356,"method":"load","native":false},{"column":12,"file":"module.js","function":"Function.Module._load","line":312,"method":"Module._load","native":false},{"column":10,"file":"module.js","function":"Function.Module.runMain","line":497,"method":"Module.runMain","native":false},{"column":16,"file":"node.js","function":"startup","line":119,"method":null,"native":false},{"column":3,"file":"node.js","function":null,"line":902,"method":null,"native":false}],"stack":["TypeError: Object function logger(options) {","  if ('object' == typeof options) {","    options = options || {};","  } else if (options) {","    options = { format: options };","  } else {","    options = {};","  }","","  // output on request instead of response","  var immediate = options.immediate;","","  // check if log entry should be skipped","  var skip = options.skip || function () { return false; };","","  // format name","  var fmt = exports[options.format] || options.format || exports.default;","","  // compile format","  if ('function' != typeof fmt) fmt = compile(fmt);","","  // options","  var stream = options.stream || process.stdout","    , buffer = options.buffer;","","  // buffering support","  if (buffer) {","    var realStream = stream","      , buf = []","      , interval = 'number' == typeof buffer","        ? buffer","        : defaultBufferDuration;","","    // flush interval","    setInterval(function(){","      if (buf.length) {","        realStream.write(buf.join(''));","        buf.length = 0;","      }","    }, interval);","","    // swap the stream","    stream = {","      write: function(str){","        buf.push(str);","      }","    };","  }","","  return function logger(req, res, next) {","    var sock = req.socket;","    req._startTime = new Date;","    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;","","    function logRequest(){","      res.removeListener('finish', logRequest);","      res.removeListener('close', logRequest);","      if (skip(req, res)) return;","      var line = fmt(exports, req, res);","      if (null == line) return;","      stream.write(line + '\\n');","    };","","    // immediate","    if (immediate) {","      logRequest();","    // proxy end to output logging","    } else {","      res.on('finish', logRequest);","      res.on('close', logRequest);","    }","","","    next();","  };","} has no method 'debug'","    at Object.<anonymous> (/home/soumik/Projects/nodejs/cloud_tripper1/app.js:23:8)","    at Module._compile (module.js:456:26)","    at Object.Module._extensions..js (module.js:474:10)","    at Module.load (module.js:356:32)","    at Function.Module._load (module.js:312:12)","    at Function.Module.runMain (module.js:497:10)","    at startup (node.js:119:16)","    at node.js:902:3"],"level":"error","message":"uncaughtException: Object function logger(options) {\n  if ('object' == typeof options) {\n    options = options || {};\n  } else if (options) {\n    options = { format: options };\n  } else {\n    options = {};\n  }\n\n  // output on request instead of response\n  var immediate = options.immediate;\n\n  // check if log entry should be skipped\n  var skip = options.skip || function () { return false; };\n\n  // format name\n  var fmt = exports[options.format] || options.format || exports.default;\n\n  // compile format\n  if ('function' != typeof fmt) fmt = compile(fmt);\n\n  // options\n  var stream = options.stream || process.stdout\n    , buffer = options.buffer;\n\n  // buffering support\n  if (buffer) {\n    var realStream = stream\n      , buf = []\n      , interval = 'number' == typeof buffer\n        ? buffer\n        : defaultBufferDuration;\n\n    // flush interval\n    setInterval(function(){\n      if (buf.length) {\n        realStream.write(buf.join(''));\n        buf.length = 0;\n      }\n    }, interval);\n\n    // swap the stream\n    stream = {\n      write: function(str){\n        buf.push(str);\n      }\n    };\n  }\n\n  return function logger(req, res, next) {\n    var sock = req.socket;\n    req._startTime = new Date;\n    req._remoteAddress = sock.socket ? sock.socket.remoteAddress : sock.remoteAddress;\n\n    function logRequest(){\n      res.removeListener('finish', logRequest);\n      res.removeListener('close', logRequest);\n      if (skip(req, res)) return;\n      var line = fmt(exports, req, res);\n      if (null == line) return;\n      stream.write(line + '\\n');\n    };\n\n    // immediate\n    if (immediate) {\n      logRequest();\n    // proxy end to output logging\n    } else {\n      res.on('finish', logRequest);\n      res.on('close', logRequest);\n    }\n\n\n    next();\n  };\n} has no method 'debug'","timestamp":"2015-08-01T06:26:54.239Z"}
